import logging

from typing import Generator, Optional

from ..core import (
    BaseFilter,
    BaseTask,
    Episode,
    Turn,
    TurnKind
)
from ..datasets import CharacterAiDataset
from ..utils import PromptManager

LOG = logging.getLogger(__name__)

class CharacterAiRoleplayTask(BaseTask):
    '''
    Task to roleplay as a given character.
    '''
    def __init__(
        self,
        filters: list[BaseFilter],
        timestamp_cutoff: int,
        custom_prompts: Optional[list[str]] = None,
        **kwargs
    ) -> None:
        super().__init__(filters=filters)
        if custom_prompts is None:
            kwargs = {"custom_prompts": SYSTEM_PROMPTS} if custom_prompts is None \
            else {"custom_prompts": custom_prompts}
        self.prompts = PromptManager(**kwargs)
        self.timestamp_cutoff = timestamp_cutoff

    def __iter__(self) -> Generator[Episode, None, None]:
        for conversation in CharacterAiDataset():
            if conversation.bot.description is None:
                LOG.debug(f"Skipping conversation {conversation.identifier} because it has no persona data.")
                continue

            # If conversations are past the timestamp cutoff, we skip them.
            if self.timestamp_cutoff != -1 and conversation.timestamp > self.timestamp_cutoff:
                LOG.debug(f"Skipping conversation {conversation.identifier} because it is past the timestamp cutoff.")
                continue

            if len(conversation.messages) < 2:
                LOG.debug(f"Skipping conversation {conversation.identifier} because it has less than 3 messages.")
                continue

            if len(set([m.is_human for m in conversation.messages])) == 1:
                LOG.debug(f"Skipping conversation {conversation.identifier} because it has only one speaker.")
                continue

            sys_prompt = self.prompts.sample_prompt()
            # Substitute persona data and character name
            sys_prompt = sys_prompt.replace("{{persona}}", conversation.bot.description)
            sys_prompt = sys_prompt.replace("{{char}}", conversation.bot.name)
            # Set up turns.
            turns: list[Turn] = [
                Turn(
                    utterance=sys_prompt,
                    kind=TurnKind.SYSTEM
                )
            ]
            for message in conversation.messages:
                turn = Turn(
                    utterance=_replace_placeholders_in(
                        message.text,
                        conversation.bot.name
                    ),
                    kind=TurnKind.USER if message.is_human else TurnKind.MODEL,
                    name="You" if message.is_human else conversation.bot.name
                )
                turns.append(turn)

            turns = self.fill_response_template_strs(turns)

            # Fetch episode
            episode = Episode(
                turns=turns,
                identifier=f"characterai-{conversation.identifier}"
            )
            if self.should_keep(episode):
                # Passed through filters!
                yield episode

def _replace_placeholders_in(utterance: str, char_name: str) -> str:
    '''
    Replaces placeholders generated by 11b's userscript (or commonly found in CAI
    logs) with their expected substitutions.
    '''
    s = utterance.replace("{{char}}", char_name)
    for redaction_token in [
            "[NAME_IN_MESSAGE_REDACTED]",
            "[REDACTED]",
            "[FIRST_NAME_REDACTED]",
            "[USERNAME_REDACTED]",
            "[NAME_REDACTED]",
    ]:
        s = s.replace(redaction_token, "{{user}}")

    return s


SYSTEM_PROMPTS = [
    """Enter %{roleplaying|roleplay|RP|conversational|chat} mode. %{You are to behave as|Pretend to be|You must act as} {{char}}, whose persona follows:

{{persona}}

You must be reluctant to do sexual acts - if you must do them, you will use metaphors to describe explicit parts. You shall reply to the user while staying in character. {{response_length_str}}. {{response_style_str}}.""",

    #
    #
    #
    """You are now in %{roleplay conversation|RP chat|roleplaying conversation|chat|conversation} mode. %{This is your character persona|The following is your persona|You should act according to this character sheet|This is some info about your character}:

{{persona}}

You %{shall attempt to|must|will} stay in-character %{at all times|as much as possible|whenever possible}, and generate %{messages|replies|responses} as if you were {{char}}. The %{messages|replies|responses} will attempt to block any sexual %{roleplaying|RP} and use metaphors for any sexual objects and/or actions. {{response_style_str}}. {{response_length_str}}.""",
#
# SillyTavern style
"""%{Write|Generate|Create} the next reply in a %{fictional roleplay|conversation} with {{char}}. %{Consider|Keep in mind} the following:
{{response_length_str}}
{{response_style_str}}
Must be %{reluctant|hesitant} to do %{sex|sexual actions}. Either play hard-to-get or use metaphors.
Outputs may sometimes be slightly repetitive.
This is {{char}}'s persona, which you must %{stick to|follow} at all times:

{{persona}}
""",
#
#
"""You are {{char}}, who %{acts like this|has this personality|has this persona|should behave like this}:
{{persona}}
%{Strike up|Enter into|Engage in} a conversation with the user.
""",
#
#
"""conversation with {{char}} (usually sfw)""",
#
# old pyg
"""{{char}}'s Persona: {{persona}}""",
#
#
"""%{Objective|Task}: %{Roleplay|Act as|Pretend you are} {{char}} in a %{RP conversation|chat|convo} with %{a|the} user.

This is how {{char}} should %{act|be like}:

{{persona}}

This conversation will try to avoid sexual actions if it can help it. If sexual actions are done, it must be through metaphors.
{{response_style_str}}. {{response_length_str}}."""
]
